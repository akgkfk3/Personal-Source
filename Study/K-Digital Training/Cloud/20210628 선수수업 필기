오늘은 지난 번 수업 리마인드 하고, AWS에 웹 서버 설치하는 실습을 해볼 것이다.

AWS란 "Amazon Web Service"의 약자로 아마존에서 만든 클라우드 환경이다.

불과 몇년 전까지만 하더라도 회사 내에 서버실이 있었고, 평소에 서버 2대로만 운용하다가 특정 이벤트때마다 (ex.대학교의 수강신청일) 트래픽 급증할 시 서버를 30대 이상으로 증설할 필요가 있었다.

하지만 평소에 서버가 2대만 필요한데 특정 이벤트를 위해서 서버를 30대 이상으로 가지고 있어야 할 비용이 너무 크기 때문에 가상화를 시작해 클라우드의 필요성이 대두되었다.

과거만 하더라도 개발자와 엔지니어 간의 경계는 완벽히 구분되어져 있었으나 클라우드가 나오고 나서부터 업무 간의 경계가 허물어지게 되었다.

[추가개념 IaC]
* IaC (Infrastructure as Code)
- 프로그래밍형 인프라"라고도 말하는데, 인프라 구성을 코드를 이용해 자동으로 구축, 관리, 프로비저닝하는 IT 인프라 프로비저닝 프로세스의 일종이라고 한다. 
- 프로비저닝, 시스템 변경 및 구성에 대해 일관되게 반복되는 과정을 (잘 짜여진! 정확한) 코드를 통해 자동화하면 빠르게 변경/구성할 수 있을 뿐더러 우리가 수동으로 구성했을 때 누락하거나 잘못 설정하는 등의 실수를 없앨 수 있다는 장점이 있다
- IaC라는 개념은 DevOps가 부상하게 된 토대가 되었는데, 인프라 구성을 위한 코드와 애플리케이션 실행을 위한 코드의 경계가 좁아지면서 개발자와 운영자의 경계도 모호해지게 된 것이다

자 Google에 AWS Console을 검색후 AWS 사이트에 들어가서 로그인을 한다 [루트 사용자]

우측 최상단에 본인 AWS 클라우드가 물리적으로 어느 지역에 설치될 지 선택할 수 있다.

크게는 리전(국가)로 분류되며 (ex. ap-northeast2 서울) 하위로는 Zone (실제 서비스를 제공하는 서버의 위치-도시 / ap-northeast2-a 일산, ap-northeast2-b 목동, ap-northeast2-c 용인)이 있다. 

[참고]
어저께 Putty 프로그램을 이용하여 SSH 프로토콜을 통해 강사님 리눅스 원격접속을 하였는데 과거에는 텔넷으로 통신을 하였다.
텔넷과 SSH의 차이는 HTTP와 HTTPS의 차이와 비슷하고 보안성의 유무이다.
텔넷은 데이터 전송시 암호화(?)가 이루어지지 않아 데이터가 보여질 수 有.

오늘은 AWS로 본인만의 HTTP 서버를 만들어볼 예정이고 AWS 사이트에 EC2를 클릭한다. (AWS 서비스)

보여지는 인스턴스는 가상화된 서버라고 생각하면 되고, 어제 Putty SSH처럼 HTTP, SSH, ICMP (핑 관련 프로토콜) 3가지가 다 있어야 한다.

서버에 접속하려고 들어가면 방화벽 (FireWall)이 막고 있기 때문에 원하는 서비스만 들어올 수 있도록 해당 벽돌을 언락하는 과정이 필수적이다.

해당 AWS 클라우드에 서버를 만들어도 보안을 위해 기본 디폴트 보안값이 있고, 우리는 저 위의 3가지 프로토콜에 대한 인바운드 규칙을 설정해야 하므로 디폴트값이 아닌

새로운 보안그룹을 생성해야 한다 (보안그룹이름 설명 testsg로 vpc는 기본값)

아웃바운드 규칙의 경우, 서버 기준에서 클라이언트로 전송되는 데이터이므로 따로 보안상 문제될 요지는 없고 인바운드 규칙만 추가한다. (HTTP, SSH, ICMP)

서버를 로그인하는 방법은 대표적으로 ID&PWD를 이용한 방법(보안상 결함이 多)과 키페어(ex. 공인인증서) 방법이 있다.
- 위의 ID&PWD는 리눅스 설치할 때 입력했던 root-test123, user1-user1이다. 

키페어는 공개키와 사설키 2개를 생성하는데, 공개키는 자물쇠, 사설키는 열쇠로 생각하면 이해하기가 쉽다.

사설키는 파일로 되어있고 공개키는 서버가 만들어질 때 같이 들어간다.

이렇게 클라우드는 만들어졌고, SSH로 접속을 해볼 것이며, Putty 및 PuttyGen 2가지 파일을 다운받는다.

오늘은 AWS에 HTTP 서버를 설치하고 접속까지 전부 실습하였다.

내일은 데이터베이스 설치부터 시작해서 밑의 내용을 실습할 예정이다.
- 외부에서 웹페이지로 접속하면 "정상적으로 데이터베이스 연결에 성공하였습니다" ~
- 내일은 ip로 접속하는게 아닌 도메인네임으로 접속해볼 것이다.
